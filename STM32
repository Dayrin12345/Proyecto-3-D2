#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include "ili9341.h" // Librería para manejar la pantalla TFT ILI9341
#include "fatfs_sd.h" // Librería para guardar datos en la tarjeta SD

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

// Variables para guardar datos en la tarjeta SD
SPI_HandleTypeDef hspi1;
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

uint8_t b1_pressed = 0; // Variable para verificar que el botón 1 ha sido presionado
uint8_t b2_pressed = 0; // Variable para verificar que el botón 2 ha sido presionado

uint8_t msg1[20] = "Temperatura: ";
uint8_t msg2[5] = "C\n";
uint8_t msg3[20] = "Guardando...\n";
uint8_t grados[] = "°C \n";
uint8_t buffer2[10]; // guarda la temperatura como string

float numero;
char buffer[20];
char comando1 = 'R';  // El comando que indica al ESP32 que mida la temperatura
char comando2 = 'G';  // El comando que indica al ESP32 que se están guardando los datos
float temperatura;

// Dibujos a mostrar en la pantalla
extern uint8_t snowman[]; 
extern uint8_t frio2[];
extern uint8_t derretido[];
extern uint8_t calor4[];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_UART5_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void tarjetaSD(float num); // Guarda el valor en la tarjeta SD
void transmit_uart(char *string); // Muestra un mensaje mediante el UART 2
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//void mostrarValor() {

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_UART5_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
LCD_Init(); // Inicia la pantalla
LCD_Clear(0xFFFF); // La limpia colocándolo en blanco
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  
	  if (b1_pressed == 1) {
			b1_pressed = 0;  // Reinicia la variable
		        // Enviar el comando 'R' al ESP32 para solicitar la temperatura
		        HAL_UART_Transmit(&huart5, (uint8_t*)&comando1, sizeof(comando1), HAL_MAX_DELAY);

		        // Recibir la temperatura en formato float desde el ESP32
		        HAL_UART_Receive(&huart5, (uint8_t*)&temperatura, sizeof(temperatura), HAL_MAX_DELAY);

		        // Convertir el número flotante a una cadena con dos decimales
		        snprintf(buffer, sizeof(buffer), "%.2f", temperatura);

		        // Enviar la cadena por UART para mostrarla en el monitor serial
		        HAL_UART_Transmit(&huart2, msg1, sizeof(msg1) - 1, HAL_MAX_DELAY);
		        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
		        HAL_UART_Transmit(&huart2, msg2, sizeof(msg2) - 1, HAL_MAX_DELAY);

		        HAL_Delay(1000); // Retardo para evitar múltiples envíos rápidos

|			if (temperatura < 20.00) { 
				// Pantalla ILI9341
				LCD_Print(buffer, 75, 210, 2, 0x0000, 0xFFFF); // Muestra la temperatura
				LCD_Bitmap(180, 80, 80, 80, snowman); // Muestra un muñeco de nieve
				for (int x = 0; x < 20; x++) { // Muestra un termómetro llegando a temperaturas bajas
					HAL_Delay(15);
					int anim = (x/10)%2;
					LCD_Sprite(60, 10, 119, 200, frio2, 2, anim, 0, 1);
				}
			}
			if (temperatura >= 20.00) {
				// Pantalla ILI9341
				LCD_Print(buffer2, 75, 210, 2, 0x0000, 0xFFFF); // Muestra la temperatura
				LCD_Bitmap(180, 94, 80, 80, derretido); // Muestra un muñeco de nieve derretido
				for (int x = 0; x < 20; x++) { // Muestra un termómetro llegando a temperaturas altas
					HAL_Delay(15);
					int anim2 = (x/5)%4;
					LCD_Sprite(60, 10, 119, 200, calor4, 4, anim2, 0, 1);
				}
			}
			LCD_Clear(0xFFFF);
		      }
	  if (b2_pressed == 1) {
			b2_pressed = 0; // Reinicia la variable
			HAL_UART_Transmit(&huart5, (uint8_t*)&comando2, sizeof(comando2), HAL_MAX_DELAY);
		  	HAL_UART_Transmit(&huart2, msg3, sizeof(msg3) - 1, HAL_MAX_DELAY);
			tarjetaSD(temperatura); // Manda la temperatura a una función para que se guarde en la tarjeta
			HAL_Delay(1000); // Retardo para evitar múltiples envíos rápidos
		  	   
	  }
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    if (GPIO_Pin == B1_Pin) {
        // Acción cuando se presiona el botón
        b1_pressed = 1;
    }
    if (GPIO_Pin == B2_Pin) {
        // Acción cuando se presiona el botón
        b2_pressed = 1;
    }
}

void tarjetaSD (float num) { // Guarda la temperatura en la tarjeta SD

	// Montar SD
	fres = f_mount(&fs, "/", 0);
	if (fres==FR_OK) {
		transmit_uart("\nLa tarjeta micro SD se ha montado correctamente. \n");
	} else if (fres != FR_OK) {
		  transmit_uart("Hubo un error al montar la tarjeta micro SD. \n");
	}
	HAL_Delay(500);

	//Abrir archivo
	fres = f_open(&fil, "proyecto3.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
	if (fres==FR_OK) {
		transmit_uart("El documento se ha abierto para leer y verificar que haya espacio disponible. \n");
	} else if (fres != FR_OK) {
		  transmit_uart("No fue posible abrir el documento. \n");
	}

	HAL_Delay(500);

	// Convertir el float a una cadena
	sprintf(buffer2, "%.2f", num);

	// Escribir el número en el archivo
	fres = f_write(&fil, msg1, strlen(msg1), &bw);
	fres = f_write(&fil, buffer2, strlen(buffer2), &bw);
	fres = f_write(&fil, grados, strlen(grados), &bw);

	if (fres == FR_OK)
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)msg1, sizeof(msg1), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer2, sizeof(buffer2), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, sizeof(msg2), HAL_MAX_DELAY);
	} else {
		transmit_uart("Error al escibir el valor. \n");
	}
	HAL_Delay(500);

	// Cerrar archivo
	fres = f_close(&fil);
	if (fres==FR_OK) {
		  transmit_uart("El archivo se ha cerrado.\n");
	} else if (fres != FR_OK) {
		  transmit_uart("No se pudo cerrar el archivo. \n");
	}
	HAL_Delay(500);

	// Desmontar unidad
	f_mount(NULL, "", 1);
	if (fres==FR_OK) {
		  transmit_uart("Se ha desmontado la tarjeta micro SD. \n");
	} else if (fres != FR_OK) {
		  transmit_uart("No se ha podido desmontar la tarjeta micro SD. \n");
	}
	HAL_Delay(500);
}

void transmit_uart(char *string) { // Muestra una cadena mediante el UART2
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
